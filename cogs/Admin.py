import discord
from discord.utils import get
from discord.ext import commands
from discord.commands import SlashCommandGroup, Option

from func.config import update_cooldown, get_cooldown_time
from scripts.guilds import guild_data, roles_lists
from db.users import Users
from db.town import City
from session.SessionContent import event_001

event_list = [
    "‡∏ö‡∏ó‡∏ó‡∏µ‡πà 1",
    "‡∏ö‡∏ó‡∏ó‡∏µ‡πà 2",
    "‡∏ö‡∏ó‡∏ó‡∏µ‡πà 3",
    "‡∏ö‡∏ó‡∏ó‡∏µ‡πà 4",
    "‡∏ö‡∏ó‡∏ó‡∏µ‡πà 5",
    "‡∏ö‡∏ó‡∏ó‡∏µ‡πà 6",
    "‡∏ö‡∏ó‡∏ó‡∏µ‡πà 7",
    "‡∏ö‡∏ó‡∏ó‡∏µ‡πà 8",
    "‡∏ö‡∏ó‡∏ó‡∏µ‡πà 9",
    "‡∏ö‡∏ó‡∏ó‡∏µ‡πà 10"
]
guild_id = guild_data()["roleplay"]
commands_list = ["‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô", "‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡πÄ‡∏á‡∏¥‡∏ô", "‡∏õ‡∏£‡∏±‡∏ö‡∏ö‡∏ó‡∏ö‡∏≤‡∏ó"]
permissions_roles = roles_lists()
class AdminCommand(commands.Cog):
    def __init__(self, bot):
        self.bot = bot

    admin = SlashCommandGroup(guild_ids=[guild_id], name="admin", description="‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô")

    @admin.command(name="‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô", description="‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡πÉ‡∏ô‡∏î‡∏¥‡∏™‡∏Ñ‡∏≠‡∏£‡πå‡∏î‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå")
    async def manage_player(
            self,
            ctx:discord.Interaction,
            member:Option(discord.Member, "‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô"),
            command:Option(str,"‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£", choices=commands_list),
            roles :Option(default=None, choices=permissions_roles)

    ):
        guild = ctx.guild
        member = guild.get_member(int(member.id))
        await ctx.response.defer(ephemeral=True, invisible=False)
        msg = await ctx.followup.send(f"‡πÇ‡∏õ‡∏£‡∏î‡∏£‡∏≠‡∏™‡∏±‡∏Å‡∏Ñ‡∏£‡∏π‡πà ‡∏£‡∏∞‡∏ö‡∏ö‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ {command} ‡πÉ‡∏´‡πâ‡∏Å‡∏±‡∏ö {member.mention}")
        if command == commands_list[2]:
            try:
                role = get(guild.roles,name=roles)
                if role:
                    await member.add_roles(role)
            except Exception as e:
                await msg.edit(content=e)
            return await msg.edit(content=f"‡∏£‡∏∞‡∏ö‡∏ö‡∏ó‡∏≥‡∏Å‡∏≤‡∏£ {command} {roles} ‡πÉ‡∏´‡πâ‡∏Å‡∏±‡∏ö {member.mention} ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß")

    @admin.command(name="‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ñ‡∏•‡∏π‡∏î‡∏≤‡∏ß‡∏ô‡πå‡∏Ç‡∏≠‡∏á‡∏õ‡∏∏‡πà‡∏°‡∏Å‡∏î", description="‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏±‡∏ö‡πÅ‡∏Å‡πâ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏ß‡∏•‡∏≤ cooldown ‡∏Ç‡∏≠‡∏á‡∏õ‡∏∏‡πà‡∏°‡∏Å‡∏î")
    async def manage_cooldown(
            self,
            ctx:discord.Interaction,
            amount:Option(int, "‡∏£‡∏∞‡∏ö‡∏∏‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏ß‡∏•‡∏≤‡πÉ‡∏´‡πâ‡∏Å‡∏±‡∏ö‡∏£‡∏∞‡∏ö‡∏ö ‡∏Ñ‡∏¥‡∏î‡πÄ‡∏õ‡πá‡∏ô ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ")):
        await ctx.response.defer(ephemeral=True, invisible=False)
        try:
            update_cooldown(amount)
            await ctx.followup.send(f"‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏±‡∏ö Cooldown Button ‡πÄ‡∏õ‡πá‡∏ô {get_cooldown_time()} ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß")
        except Exception as e:
            await ctx.followup.send(e)

    @admin.command(name="‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•", description="‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•")
    async def database_manager(
            self,
            ctx:discord.Interaction,
            db_name:Option(str, "‡∏£‡∏∞‡∏ö‡∏ö‡∏ä‡∏∑‡πà‡∏≠‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•")
    ):
        try:
            if db_name == "users":
                Users().drop_table()
                Users().create_table()
                return await ctx.response.send_message(f"reset {db_name} successfully...", ephemeral=True)
            elif db_name == "town":
                City().drop_table()
                City().create_table()
                return await ctx.response.send_message(f"reset {db_name} successfully...", ephemeral=True)
            else:
                return await ctx.response.send_message(f"database -> ` {db_name} ` : ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö", ephemeral=True)
        except Exception as e:
            return await ctx.response.send_message(e, ephemeral=True)

    @admin.command(name="‡πÄ‡∏ä‡πá‡∏Ñ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠", description="‡∏£‡∏∞‡∏ö‡∏ö‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠")
    async def access_total(self,ctx:discord.Interaction):
        await ctx.response.send_message(Users().user_count()[0], ephemeral=True)


    @admin.command(name="‡∏õ‡∏£‡∏±‡∏ö‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü", description="‡∏£‡∏∞‡∏ö‡∏ö‡∏õ‡∏£‡∏±‡∏ö‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå")
    async def access_approved(
            self,
            ctx:discord.Interaction,
            choise:Option(str, "‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£", choices=["‡∏ñ‡∏≠‡∏ô‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå", "‡πÉ‡∏´‡πâ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå"]),
            member:Option(discord.Member, "‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏±‡∏ö‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü")
    ):
        method = ["‡∏ñ‡∏≠‡∏ô‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå", "‡πÉ‡∏´‡πâ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå"]
        try:
            if choise == method[0]:
                Users().approved(member.id, 0)
                return await ctx.response.send_message(f"‡∏£‡∏∞‡∏ö‡∏ö‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡∏õ‡∏•‡∏î‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö {member.mention} ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß", ephemeral=True)
            elif choise == method[1]:
                Users().approved(member.id, 1)
                return await ctx.response.send_message(f"‡∏£‡∏∞‡∏ö‡∏ö‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏±‡∏ö‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÉ‡∏´‡πâ‡∏Å‡∏±‡∏ö {member.mention} ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß", ephemeral=True)
        except Exception as e:
            return await ctx.response.send_message(e, ephemeral=True)


    @admin.command(name="‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á‡∏£‡∏∞‡∏ö‡∏ö‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°", description="‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á‡πÅ‡∏Ñ‡∏ï‡∏ï‡∏≤‡∏Å‡∏≠‡∏£‡∏µ‡πà‡πÅ‡∏•‡∏∞‡πÅ‡∏ä‡∏•‡πÅ‡∏ô‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡∏Ç‡∏≠‡∏á‡∏≠‡∏µ‡πÄ‡∏ß‡πâ‡∏ô")
    async def session_content(
            self,
            ctx:discord.Interaction,
            method:Option(str, "‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£", choices=["install", "uninstall"]),
            session:Option(str, "‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏≠‡∏µ‡πÄ‡∏ß‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£", choices=event_list)
    ):
        guild = ctx.guild
        choices = ["install", "uninstall"]
        if method == choices[0]:
            cate = "EVENT CONTENT"
            overwrites = {
                guild.default_role : discord.PermissionOverwrite(
                    view_channel=True,
                    read_messages=True,
                    read_message_history=True,
                    send_messages=False
                )
            }
            try:
                if discord.utils.get(guild.categories, name=cate):
                    pass
                else:
                    await guild.create_category(name=cate, overwrites=overwrites)
            except Exception as e:
                return await ctx.response.send_message(e, ephemeral=True)
            else:
                if session == event_list[0]:
                    channel_name = "üìî-‡∏ö‡∏ó‡∏ó‡∏µ‡πà-1"
                    try:
                        cates = discord.utils.get(guild.categories, name=cate)
                        channel = discord.utils.get(guild.channels, name=channel_name)
                        if channel:
                            await channel.purge()
                            await channel.send(embed=event_001())
                        else:
                            channel = await guild.create_text_channel(name=channel_name, category=cates)
                            if channel:
                                await channel.purge()
                                await channel.send(embed=event_001())
                                await ctx.response.send_message(f"{session}", ephemeral=True)
                    except Exception as e:
                        return await ctx.response.send_message(e, ephemeral=True)
                    finally:
                        await ctx.response.send_message(f"‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡∏Ç‡∏≠‡∏á {session} ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß", ephemeral=True)

        elif method == choices[1]:
            await ctx.response.send_message(f"{method}", ephemeral=True)




def setup(bot):
    bot.add_cog(AdminCommand(bot))