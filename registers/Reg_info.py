import discord
from discord.ext import commands

from db.users import Users
from views.System.Register import RegisterButton


def count_access():
    amount = Users().user_count()
    total  = (30 - int(amount[0]))
    return total


class Register_Access(discord.ui.View):
    def __init__(self, bot):
        super(Register_Access, self).__init__(timeout=None)
        self.bot = bot
        self.cooldown = commands.CooldownMapping.from_cooldown(1, 30, commands.BucketType.member)

    # @discord.ui.button(label=f"‡πÄ‡∏ä‡πá‡∏Ñ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠", style=discord.ButtonStyle.secondary, emoji="üîê",custom_id="count_access")
    # async def count_access(self, button, interaction:discord.Interaction):
    #     button.disabled =False
    #     interaction.message.author = interaction.user
    #     bucket = self.cooldown.get_bucket(interaction.message)
    #     retry = bucket.update_rate_limit()
    #     if retry:
    #         return await interaction.response.send_message(
    #             f'‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏≠‡∏≠‡∏µ‡∏Å {round(retry, 30)} ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ñ‡∏∂‡∏á‡∏à‡∏∞‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á', ephmeral=True
    #         )
    #     return await interaction.response.edit_message(content=f"‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ‡πÄ‡∏ó‡πà‡∏≤‡∏Å‡∏±‡∏ö {count_access()} ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå", view=None, embed=None)

    @discord.ui.button(label="‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å", style=discord.ButtonStyle.secondary, emoji="üìù", custom_id='reg_access')
    async def reg_access(self, button, interaction: discord.Interaction):
        interaction.message.author = interaction.user
        bucket = self.cooldown.get_bucket(interaction.message)
        retry = bucket.update_rate_limit()
        if retry:
            return await interaction.response.send_message(
                f'‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏≠‡∏≠‡∏µ‡∏Å {round(retry,30)} ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ñ‡∏∂‡∏á‡∏à‡∏∞‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á', ephmeral=True
            )
        if count_access() == 0:
            return await interaction.response.edit_message(content=f"{interaction.user.mention} ‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ ‡∏°‡∏µ‡∏ú‡∏π‡πâ‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏Ç‡∏≠‡∏á‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü ‡πÄ‡∏ï‡πá‡∏°‡πÅ‡∏•‡πâ‡∏ß",view=None,embed=None,attachments=None)
        button.disabled = False
        member = interaction.user
        guild = interaction.guild
        cat_name = "USER PROFILES"
        room_name = "üìù-‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô-id-{}".format(member.discriminator)
        overwrites = {
            guild.default_role: discord.PermissionOverwrite(
                view_channel=False,
                read_messages=False
            )
        }
        try:
            category = discord.utils.get(guild.categories, name=cat_name)
            if category:
                pass
            else:
                await guild.create_category(name=cat_name, overwrites=overwrites)
        except Exception as e:
            return await interaction.response.edit_message(content=e, view=None)
        else:
            try:
                cate = discord.utils.get(guild.categories, name=cat_name)
                if cate:
                    channel = discord.utils.get(guild.channels, name=room_name)
                    if channel:
                        await channel.delete()
            except Exception as e:
                return await interaction.response.edit_message(content=e, view=None)
            else:
                overwrites = {
                    member: discord.PermissionOverwrite(
                        view_channel=True,
                        read_messages=True,
                        send_messages=True,
                        read_message_history=True
                    )
                }
                register_channel = await guild.create_text_channel(name=room_name, category=cate, overwrites=overwrites)
                await interaction.response.edit_message(content=f"‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏´‡πâ‡∏≠‡∏á {register_channel.mention} ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô", view=None, embed=None)
                return await register_channel.send(file=discord.File('./img/concept/steam.png'), view=RegisterButton(self.bot))
    # @discord.ui.button(label="‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡πà‡∏ß‡∏°‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£", style=discord.ButtonStyle.secondary, emoji="‚ö†", custom_id="reg_access_cancle")
    # async def reg_access_cancle(self, button, interaction:discord.Interaction):
    #     button.disabled=False
    #     user = interaction.user
    #     txt = """‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏ó‡∏µ‡πà‡πÉ‡∏´‡πâ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏ô‡πÉ‡∏à‡∏ï‡πà‡∏≠‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡∏Ç‡∏≠‡∏á‡πÄ‡∏£‡∏≤"""
    #     txt1 = f"""{user.display_name} - ‡∏£‡∏∞‡∏ö‡∏ö‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ô‡∏≥‡∏Ñ‡∏∏‡∏ì‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö"""
    #     embed = discord.Embed(
    #         title=txt1,
    #         description=txt,
    #         colour=discord.Colour.from_rgb(214, 27, 9)
    #     )
    #     embed.set_image(url=img_('goodbye'))
    #     await interaction.response.edit_message(content=None,view=None,embed=embed)