import asyncio
import random

import discord
from discord.ext import commands

from Class.TeaserEvent import GetTeaser
from db.Events import TeaserEvent
from db.Ranking import Ranking
from db.town import City
from db.users import Users
from func.config import get_cooldown_time, steam_check, save_to_db, get_quest, img_
from func.member import user_info
from func.rank import ranking_img
from server.information import reg_success
from views.Contract.ContactView import ContractButton
from views.Town.CityRegister import CityRegisterConfirm


class CloseRequestRegister(discord.ui.View):
    def __init__(self, bot):
        super(CloseRequestRegister, self).__init__(timeout=None)
        self.bot = bot

    @discord.ui.button(label='Close', style=discord.ButtonStyle.secondary, custom_id="close_reg")
    async def close_reg(self, button, interaction):
        button.disabled= False
        await interaction.channel.purge()

        img=discord.File('./img/member/member.png')
        await interaction.channel.send(
            file=img,
            view=UsersViews(self.bot)
        )

class RegisterRequest(discord.ui.View):
    def __init__(self, bot):
        super(RegisterRequest, self).__init__(timeout=None)
        self.bot = bot
        self.cooldown = commands.CooldownMapping.from_cooldown(1, int(60), commands.BucketType.member)

    @discord.ui.button(label="‡πÇ‡∏õ‡∏£‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏£‡∏´‡∏±‡∏™‡∏™‡∏ï‡∏£‡∏µ‡∏°‡πÑ‡∏≠‡∏î‡∏µ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô", style=discord.ButtonStyle.secondary,
                       disabled=True, custom_id="request_reg_disabled")
    async def request_reg_disabled(self, button, interaction):
        await interaction.response.send_message(f"{interaction.user.name} click {button.label}", ephemeral=True)

    @discord.ui.button(label="Register Now", style=discord.ButtonStyle.secondary, custom_id="request_reg")
    async def request_reg(self, button, interaction: discord.Interaction):
        button.disabled = False
        member = interaction.user
        interaction.message.author = interaction.user
        bucket = self.cooldown.get_bucket(interaction.message)
        retry = bucket.update_rate_limit()
        if retry:
            return await interaction.response.send_message(
                f'‡∏≠‡∏µ‡∏Å {round(retry, int(60))} ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ñ‡∏∂‡∏á‡∏à‡∏∞‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á', ephemeral=True)
        await interaction.response.defer(ephemeral=False, invisible=False)

        def check(res):
            return res.author == interaction.user and res.channel == interaction.channel

        qustion = await interaction.followup.send(f"üìù {member.mention} ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏‡∏£‡∏´‡∏±‡∏™‡∏™‡∏ï‡∏£‡∏µ‡∏°‡πÑ‡∏≠‡∏î‡∏µ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì")
        while True:

            try:
                steam = await self.bot.wait_for(event="message", check=check, timeout=60)
                # print(steam.content)
                if steam_check(steam.content):
                    await steam.delete()
                    # print("register successfully...")
                    await qustion.edit(content=None, embed=reg_success(member, steam.content),
                                       view=CloseRequestRegister(self.bot))
                    return save_to_db(member.id, steam.content)
                    # return await discord.DMChannel.send(member, "")
            except asyncio.TimeoutError:
                # print("Progress TimeOut!!!!")
                return await qustion.edit(
                    f"{interaction.user.mention} : ‡∏Ñ‡∏∏‡∏ì‡πÉ‡∏ä‡πâ‡πÄ‡∏ß‡∏•‡∏≤‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏ä‡πâ‡∏≤‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏°‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á")
            else:
                await steam.delete()
                await qustion.edit(content="info not found! Please try agian")
                # print("enter steam id again")

class UsersViews(discord.ui.View):
    def __init__(self, bot):
        super(UsersViews, self).__init__(timeout=None)
        self.bot = bot
        self.cooldown = commands.CooldownMapping.from_cooldown(1, int(get_cooldown_time()), commands.BucketType.member)

    @discord.ui.button(label="‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ", style=discord.ButtonStyle.secondary, emoji="üìù", custom_id='user_info')
    async def user_info(self, button, interaction:discord.Interaction):
        button.disabled=False
        interaction.message.author = interaction.user
        bucket = self.cooldown.get_bucket(interaction.message)
        retry = bucket.update_rate_limit()
        if retry:
            return await interaction.response.send_message(
                f'‡∏≠‡∏µ‡∏Å {round(retry, int(get_cooldown_time()))} ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ñ‡∏∂‡∏á‡∏à‡∏∞‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á', ephemeral=True)

        if Users().check(interaction.user.id) == 0:
            return await interaction.response.send_message(f"‚ö† {interaction.user.mention} ‡∏Ñ‡∏∏‡∏ì‡∏ñ‡∏π‡∏Å‡∏£‡∏∞‡∏ö‡∏ö‡∏õ‡∏•‡∏î‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö", view=RegisterRequest(self.bot))


        await interaction.response.defer(ephemeral=True, invisible=False)
        if City().city(interaction.user.id) == 0:
            return await interaction.followup.send(embed=user_info(interaction.user), view=CityRegisterConfirm(self.bot))
        if City().city(interaction.user.id) == 1:
            return await interaction.followup.send(embed=user_info(interaction.user))

    @discord.ui.button(label="‡∏Å‡∏£‡∏∞‡∏î‡∏≤‡∏ô‡∏†‡∏≤‡∏£‡∏Å‡∏¥‡∏à", style=discord.ButtonStyle.secondary, emoji="üé°", custom_id='user_quest')
    async def user_quest(self, button, interaction:discord.Interaction):
        button.disabled=False
        member = interaction.user
        interaction.message.author = interaction.user
        bucket = self.cooldown.get_bucket(interaction.message)
        retry = bucket.update_rate_limit()

        if retry:
            return await interaction.response.send_message(
                f'‡∏≠‡∏µ‡∏Å {round(retry, int(get_cooldown_time()))} ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ñ‡∏∂‡∏á‡∏à‡∏∞‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á', ephemeral=True)

        try:
            if Ranking().check(interaction.user.id) == 0:
                Ranking().new_rank(interaction.user.id)
        except Exception as e:
            print(e)

        if get_quest() == "Close":
            return await interaction.response.send_message("‡∏Ç‡∏≠‡∏≠‡∏†‡∏±‡∏¢‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏Ñ‡∏ß‡∏™‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÉ‡∏ô‡∏Ç‡∏ô‡∏∞‡∏ô‡∏µ‡πâ", ephemeral=True)


        if TeaserEvent().event_count() == 0:
            rank = Ranking().ranking(interaction.user.id)[2]
            embed = discord.Embed(
                title="Ranking information",
                color=discord.Colour.from_rgb(255, 195, 0)
            )
            embed.add_field(name="‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô", value=interaction.user.display_name)
            embed.add_field(name="‡∏Ñ‡πà‡∏≤‡∏õ‡∏£‡∏∞‡∏™‡∏ö‡∏Å‡∏≤‡∏£‡∏ì‡πå", value=Ranking().ranking(interaction.user.id)[3])
            embed.set_thumbnail(url=ranking_img(rank))
            embed.set_image(url=img_("rank_embed"))
            return await interaction.response.send_message(embed=embed, ephemeral=True)

        if TeaserEvent().event_count() != 0: # ‡∏´‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó Event ‡πÄ‡∏Ç‡πâ‡∏≤‡∏°‡∏≤ ‡πÉ‡∏´‡πâ‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡πá‡∏Ñ ‡∏†‡∏≤‡∏£‡∏Å‡∏¥‡∏à‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á
            # check ‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡∏ß‡πà‡∏≤‡∏Å‡∏î‡∏£‡∏±‡∏ö‡∏†‡∏≤‡∏£‡∏Å‡∏¥‡∏à‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡∏¢‡∏±‡∏á
            if TeaserEvent().check(interaction.user.id) != 0: # ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏• ‡∏´‡∏≤‡∏Å ‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡∏°‡∏µ‡∏†‡∏≤‡∏£‡∏Å‡∏¥‡∏à‡∏Ñ‡∏á‡∏Ñ‡πâ‡∏≤‡∏á‡∏≠‡∏¢‡∏π‡πà
                if TeaserEvent().my_teaser(interaction.user.id)[8] == 0:
                    data = TeaserEvent().my_teaser(interaction.user.id)
                    embed = discord.Embed(
                        title=f"‡∏ä‡∏∑‡πà‡∏≠‡∏†‡∏≤‡∏£‡∏Å‡∏¥‡∏à : {data[1]}",
                        description=f"‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ó‡∏≥‡∏†‡∏≤‡∏£‡∏Å‡∏¥‡∏à‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡∏à‡∏∞‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö exp ‡∏´‡∏£‡∏∑‡∏≠‡∏Ñ‡πà‡∏≤‡∏õ‡∏£‡∏∞‡∏™‡∏ö‡∏Å‡∏≤‡∏£‡∏ì‡πå‡∏à‡∏≥‡∏ô‡∏ß‡∏ô {data[6]}exp ‡πÇ‡∏î‡∏¢‡∏ô‡∏≥‡∏£‡∏´‡∏±‡∏™‡∏•‡∏±‡∏ö (secret code) ‡∏°‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡πÉ‡∏´‡πâ‡∏Å‡∏±‡∏ö‡∏£‡∏∞‡∏ö‡∏ö",
                        colour=discord.Colour.from_rgb(245, 176, 65)
                    )
                    embed.set_image(url=data[4])
                    embed.set_footer(text=f"‡∏Ñ‡∏≥‡πÉ‡∏ö‡πâ : {data[5]}")
                    return await interaction.response.send_message(f"{interaction.user.mention} ‡∏Ñ‡∏∏‡∏ì‡∏°‡∏µ 1 ‡∏†‡∏≤‡∏£‡∏Å‡∏¥‡∏à‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå‡∏ô‡∏µ‡πâ", embed=embed,view=SecretCode(self.bot))
                else:
                    rank = Ranking().ranking(interaction.user.id)[2]
                    embed = discord.Embed(
                        title="Ranking information",
                        color=discord.Colour.from_rgb(255, 195, 0)
                    )
                    embed.add_field(name="‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô", value=interaction.user.display_name)
                    embed.add_field(name="‡∏Ñ‡πà‡∏≤‡∏õ‡∏£‡∏∞‡∏™‡∏ö‡∏Å‡∏≤‡∏£‡∏ì‡πå", value=Ranking().ranking(interaction.user.id)[3])
                    embed.set_thumbnail(url=ranking_img(rank))
                    embed.set_image(url=img_("rank_embed"))
                    return await interaction.response.send_message(embed=embed, ephemeral=True)





            else:
                if TeaserEvent().check(member.id) == 0:
                    img = discord.File('./img/event/startpack.png')
                    return await interaction.response.send_message(file=img, view=GetTeaser(self.bot))





    @discord.ui.button(label="‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏ó‡∏µ‡∏°‡∏á‡∏≤‡∏ô", style=discord.ButtonStyle.secondary, emoji="‚òé", custom_id='contact')
    async def contact(self, button, interaction:discord.Interaction):
        button.disabled=False
        interaction.message.author = interaction.user
        bucket = self.cooldown.get_bucket(interaction.message)
        retry = bucket.update_rate_limit()
        if retry:
            return await interaction.response.send_message(
                f'‡∏≠‡∏µ‡∏Å {round(retry, int(get_cooldown_time()))} ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ñ‡∏∂‡∏á‡∏à‡∏∞‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á', ephemeral=True)
        await interaction.response.send_message(f"{interaction.user.mention} click ‡∏ó‡∏µ‡πà‡∏õ‡∏∏‡πà‡∏°‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£", view=ContractButton(self.bot), ephemeral=True)


# ‡∏£‡∏∞‡∏ö‡∏ö‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏°‡∏£‡∏±‡∏ö‡∏†‡∏≤‡∏£‡∏Å‡∏¥‡∏à

class GetQuest(discord.ui.View):
    def __init__(self, bot, quest):
        super(GetQuest, self).__init__(timeout=None)
        self.bot = bot
        self.quest = quest
    @discord.ui.button(label="‡∏Å‡∏î‡∏ó‡∏µ‡πà‡∏õ‡∏∏‡πà‡∏°‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏£‡∏±‡∏ö‡∏†‡∏≤‡∏£‡∏Å‡∏¥‡∏à‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå", style=discord.ButtonStyle.secondary, disabled=True, custom_id="get_quest_disabled")
    async def get_quest_disabled(self, button, interaction:discord.Interaction):
        button.disabled=False,
        await interaction.response.send_message(interaction.user.mention, f"click {button.label}")
    @discord.ui.button(label="‡∏Å‡∏î‡∏£‡∏±‡∏ö‡∏†‡∏≤‡∏£‡∏Å‡∏¥‡∏à‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà", style=discord.ButtonStyle.secondary, emoji="üé≤", custom_id="get_quest_button")
    async def get_quest_button(self, button, interaction:discord.Interaction):
        button.disabled = False
        user = interaction.user
        embed = discord.Embed(
            title=self.quest[1],
            colour=discord.Colour.from_rgb(15, 115, 51)
        )
        embed.set_image(url=self.quest[4])
        await interaction.response.edit_message(content=f"{user.mention} ‡∏£‡∏∞‡∏ö‡∏ö‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏†‡∏≤‡∏£‡∏Å‡∏¥‡∏à‡πÑ‡∏õ‡∏¢‡∏±‡∏á ‡∏Å‡∏•‡πà‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢", embed=None, view=None)
        return await discord.DMChannel.send(user, embed=embed)


class SecretCode(discord.ui.View):
    def __init__(self, bot):
        super(SecretCode, self).__init__(timeout=None)
        self.bot = bot


    @discord.ui.button(label="‡∏Å‡∏î‡∏ó‡∏µ‡πà‡∏õ‡πà‡∏∏‡∏° ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Å‡∏£‡∏≠‡∏Å‡∏£‡∏´‡∏±‡∏™‡∏•‡∏±‡∏ö‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏à‡∏≤‡∏Å‡∏Å‡∏•‡πà‡∏≠‡∏á", style=discord.ButtonStyle.secondary, disabled=True, custom_id="disable_code_lock")
    async def disable_code_lock(self, button, interaction:discord.Interaction):
        button.disabled=False
        await interaction.response.send_message(button.label)
    @discord.ui.button(label="‡∏Å‡∏î‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Å‡∏£‡∏≠‡∏Å‡∏£‡∏´‡∏±‡∏™‡∏•‡∏±‡∏ö", style=discord.ButtonStyle.secondary, emoji="üìù", custom_id="enter_code_lock")
    async def enter_code_lock(self, button, interaction:discord.Interaction):
        member = interaction.user
        await interaction.response.defer(ephemeral=True, invisible=False)
        await interaction.channel.purge(limit=1)
        msg = await interaction.followup.send("üìù ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏û‡∏¥‡∏°‡∏û‡πå‡∏£‡∏´‡∏±‡∏™‡∏•‡∏±‡∏ö‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏à‡∏≤‡∏Å‡∏Å‡∏•‡πà‡∏≠‡∏á")
        button.disabled=True

        def check(res):
            return res.author == interaction.user and res.channel == interaction.channel
        while True:
            try:

                message = await self.bot.wait_for(event="message", check=check, timeout=60)
                teaser = TeaserEvent().my_teaser(interaction.user.id)[0]
                exp = TeaserEvent().my_teaser(member.id)[6]
                secret = TeaserEvent().get(teaser)[2]
                await message.delete()
                if message.content == secret:
                    try:
                        TeaserEvent().seccess(secret)
                        Ranking().update_exp(member.id, exp)
                    except Exception as e:
                        print(e)
                    else:

                        return await msg.edit(content=f"üéä ‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏î‡πâ‡∏ß‡∏¢‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö {TeaserEvent().my_teaser(interaction.user.id)[6]} EXP ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏†‡∏≤‡∏£‡∏Å‡∏¥‡∏à‡∏ô‡∏µ‡πâ")
                else:
                    print(message.content, secret)
                    text = [
                        "‡∏Ñ‡∏∏‡∏ì‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á",
                        "‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á ‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á",
                        "‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡∏Å‡∏£‡∏≠‡∏Å‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á ‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á"
                    ]
                    await msg.edit(content=random.choice(text))
            except asyncio.TimeoutError:
                return await msg.edit(content="‡πÇ‡∏õ‡∏£‡∏î‡∏Å‡∏£‡∏≠‡∏Å‡∏£‡∏´‡∏±‡∏™‡∏•‡∏±‡∏ö‡∏†‡∏≤‡∏¢‡πÉ‡∏ô‡∏£‡∏∞‡∏¢‡∏∞‡πÄ‡∏ß‡∏•‡∏≤ 1 ‡∏ô‡∏≤‡∏ó‡∏µ")

