import discord
from discord.ext import commands

from db.users import Users
from func.config import get_cooldown_time
from func.member import user_info


class UsersViews(discord.ui.View):
    def __init__(self, bot):
        super(UsersViews, self).__init__(timeout=None)
        self.bot = bot
        self.cooldown = commands.CooldownMapping.from_cooldown(1, int(get_cooldown_time()), commands.BucketType.member)

    @discord.ui.button(label="‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ", style=discord.ButtonStyle.secondary, emoji="üìù", custom_id='user_info')
    async def user_info(self, button, interaction:discord.Interaction):
        button.disabled=False
        interaction.message.author = interaction.user
        bucket = self.cooldown.get_bucket(interaction.message)
        retry = bucket.update_rate_limit()
        if retry:
            return await interaction.response.send_message(
                f'‡∏≠‡∏µ‡∏Å {round(retry, int(get_cooldown_time()))} ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ñ‡∏∂‡∏á‡∏à‡∏∞‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á', ephemeral=True)
        if Users().check(interaction.user.id) == 0:
            return await interaction.response.send_message(f"‚ö†Ô∏è {interaction.user.mention} ‡∏Ñ‡∏∏‡∏ì‡∏ñ‡∏π‡∏Å‡∏£‡∏∞‡∏ö‡∏ö‡∏õ‡∏•‡∏î‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö", ephemeral=True)
        await interaction.response.defer(ephemeral=True, invisible=False)
        return await interaction.followup.send(embed=user_info(interaction.user))

    @discord.ui.button(label="‡∏Å‡∏£‡∏∞‡∏î‡∏≤‡∏ô‡∏†‡∏≤‡∏£‡∏Å‡∏¥‡∏à", style=discord.ButtonStyle.secondary, emoji="üé°", custom_id='user_quest')
    async def user_quest(self, button, interaction:discord.Interaction):
        button.disabled=False
        interaction.message.author = interaction.user
        bucket = self.cooldown.get_bucket(interaction.message)
        retry = bucket.update_rate_limit()
        if retry:
            return await interaction.response.send_message(
                f'‡∏≠‡∏µ‡∏Å {round(retry, int(get_cooldown_time()))} ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ñ‡∏∂‡∏á‡∏à‡∏∞‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á', ephemeral=True)
        await interaction.response.send_message(f"{interaction.user.mention} click {button.label}")

    @discord.ui.button(label="‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô", style=discord.ButtonStyle.secondary, emoji="‚òé", custom_id='contract')
    async def contract(self, button, interaction:discord.Interaction):
        button.disabled=False
        interaction.message.author = interaction.user
        bucket = self.cooldown.get_bucket(interaction.message)
        retry = bucket.update_rate_limit()
        if retry:
            return await interaction.response.send_message(
                f'‡∏≠‡∏µ‡∏Å {round(retry, int(get_cooldown_time()))} ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ñ‡∏∂‡∏á‡∏à‡∏∞‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á', ephemeral=True)
        await interaction.response.send_message(f"{interaction.user.mention} click {button.label}")