import asyncio
import datetime

import discord
from discord.ext import commands

from Banks.Bank_db import Bank
from Quests.db.Mission_db import UserMission
from Quests.views.GetNewMission import GetMissionButton
from Quests.views.ReportMission import MissionReportButton, MissionExpire
from db.Ranking import Ranking
from db.town import City
from db.users import Users, PlayerEvent
from func.config import get_cooldown_time, steam_check, save_to_db, get_quest, img_
from func.member import user_info
from func.rank import ranking_img
from server.information import reg_success
from views.Contract.ContactView import ContractButton
from views.Town.CityRegister import CityRegisterConfirm


class CloseRequestRegister(discord.ui.View):
    def __init__(self, bot):
        super(CloseRequestRegister, self).__init__(timeout=None)
        self.bot = bot

    @discord.ui.button(label='Close', style=discord.ButtonStyle.secondary, custom_id="close_reg")
    async def close_reg(self, button, interaction):
        button.disabled = False
        await interaction.channel.purge()

        img = discord.File('./img/member/member.png')
        await interaction.channel.send(
            file=img,
            view=UsersViews(self.bot)
        )


class RegisterRequest(discord.ui.View):
    def __init__(self, bot):
        super(RegisterRequest, self).__init__(timeout=None)
        self.bot = bot
        self.cooldown = commands.CooldownMapping.from_cooldown(1, int(60), commands.BucketType.member)

    @discord.ui.button(label="‡πÇ‡∏õ‡∏£‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏£‡∏´‡∏±‡∏™‡∏™‡∏ï‡∏£‡∏µ‡∏°‡πÑ‡∏≠‡∏î‡∏µ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô", style=discord.ButtonStyle.secondary,
                       disabled=True, custom_id="request_reg_disabled")
    async def request_reg_disabled(self, button, interaction):
        await interaction.response.send_message(f"{interaction.user.name} click {button.label}", ephemeral=True)

    @discord.ui.button(label="Register Now", style=discord.ButtonStyle.secondary, custom_id="request_reg")
    async def request_reg(self, button, interaction: discord.Interaction):
        button.disabled = False
        member = interaction.user
        interaction.message.author = interaction.user
        bucket = self.cooldown.get_bucket(interaction.message)
        retry = bucket.update_rate_limit()
        if retry:
            return await interaction.response.send_message(
                f'‡∏≠‡∏µ‡∏Å {round(retry, int(60))} ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ñ‡∏∂‡∏á‡∏à‡∏∞‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á', ephemeral=True)
        await interaction.response.defer(ephemeral=False, invisible=False)

        if Users().check(member.id) == 1:
            await interaction.response.send_message(f"{member.mention} ‡∏Ç‡∏≠‡∏≠‡∏†‡∏±‡∏¢‡∏Ç‡∏ì‡∏∞‡∏ô‡∏µ‡πâ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ú‡∏π‡πâ‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡πÄ‡∏ï‡πá‡∏°‡πÅ‡∏•‡πâ‡∏ß",
                                                    ephemeral=True)

        def check(res):
            return res.author == interaction.user and res.channel == interaction.channel

        qustion = await interaction.followup.send(f"üìù {member.mention} ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏‡∏£‡∏´‡∏±‡∏™‡∏™‡∏ï‡∏£‡∏µ‡∏°‡πÑ‡∏≠‡∏î‡∏µ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì")
        while True:

            try:
                steam = await self.bot.wait_for(event="message", check=check, timeout=60)
                # print(steam.content)
                if steam_check(steam.content):
                    await steam.delete()
                    # print("register successfully...")
                    await qustion.edit(content=None, embed=reg_success(member, steam.content),
                                       view=CloseRequestRegister(self.bot))
                    return save_to_db(member.id, steam.content)
                    # return await discord.DMChannel.send(member, "")
            except asyncio.TimeoutError:
                # print("Progress TimeOut!!!!")
                return await qustion.edit(
                    f"{interaction.user.mention} : ‡∏Ñ‡∏∏‡∏ì‡πÉ‡∏ä‡πâ‡πÄ‡∏ß‡∏•‡∏≤‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏ä‡πâ‡∏≤‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏°‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á")
            else:
                await steam.delete()
                await qustion.edit(content="info not found! Please try agian")
                # print("enter steam id again")


class UsersViews(discord.ui.View):
    def __init__(self, bot):
        super(UsersViews, self).__init__(timeout=None)
        self.bot = bot
        self.cooldown = commands.CooldownMapping.from_cooldown(1, int(get_cooldown_time()), commands.BucketType.member)

    @discord.ui.button(label="‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ", style=discord.ButtonStyle.secondary, emoji="üìù", custom_id='user_info')
    async def user_info(self, button, interaction: discord.Interaction):
        button.disabled = False
        member = interaction.user
        interaction.message.author = interaction.user
        bucket = self.cooldown.get_bucket(interaction.message)
        retry = bucket.update_rate_limit()
        await interaction.response.defer(ephemeral=True, invisible=False)
        if retry:
            return await interaction.followup.send(
                f'‡∏≠‡∏µ‡∏Å {round(retry, int(get_cooldown_time()))} ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ñ‡∏∂‡∏á‡∏à‡∏∞‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á')

        elif Users().player(member.id)[6] != 1:
            return await interaction.followup.send(
                f"{member.mention} : ‡∏Ñ‡∏∏‡∏ì‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡∏î‡∏¥‡∏™‡∏Ñ‡∏≠‡∏£‡πå‡∏î ‡πÇ‡∏õ‡∏£‡∏î‡∏£‡∏≠‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏™‡∏¥‡∏ó‡∏ò‡πå‡∏¥‡∏à‡∏≤‡∏Å‡∏≤‡∏ó‡∏≤‡∏á‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô"
            )

        elif Users().check(interaction.user.id) == 0:
            return await interaction.followup.send(
                f"‚ö† {interaction.user.mention} ‡∏Ñ‡∏∏‡∏ì‡∏ñ‡∏π‡∏Å‡∏£‡∏∞‡∏ö‡∏ö‡∏õ‡∏•‡∏î‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö",
                view=RegisterRequest(self.bot))


        elif City().city(interaction.user.id) == 0:
            return await interaction.followup.send(embed=user_info(interaction.user),
                                                   view=CityRegisterConfirm(self.bot))
        elif City().city(interaction.user.id) == 1:
            return await interaction.followup.send(embed=user_info(interaction.user), view=BankandRank())

    @discord.ui.button(label="‡∏Å‡∏£‡∏∞‡∏î‡∏≤‡∏ô‡∏†‡∏≤‡∏£‡∏Å‡∏¥‡∏à", style=discord.ButtonStyle.secondary, emoji="üé°", custom_id='user_quest')
    async def user_quest(self, button, interaction: discord.Interaction):
        button.disabled = False
        member = interaction.user
        interaction.message.author = interaction.user
        bucket = self.cooldown.get_bucket(interaction.message)
        retry = bucket.update_rate_limit()

        def expire_date():
            now = datetime.datetime.now()
            date_add = now + datetime.timedelta(days=3)
            start = now.strftime("%d/%m/%Y")
            end = date_add.strftime("%d/%m/%Y")
            date_list = [start, end]
            return date_list

        try:
            if Ranking().check(interaction.user.id) == 0:
                Ranking().new_rank(interaction.user.id)
            elif Users().player(member.id)[6] != 1:
                return await interaction.followup.send(f"{member.mention} ‡∏Ñ‡∏∏‡∏ì‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£ ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö")
        except Exception as e:
            print(e)
        else:
            if retry:
                return await interaction.response.send_message(
                    f'‡∏≠‡∏µ‡∏Å {round(retry, int(get_cooldown_time()))} ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ñ‡∏∂‡∏á‡∏à‡∏∞‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á', ephemeral=True)
            elif Users().player(member.id)[6] != 1:
                return await interaction.followup.send(
                    f"{member.mention} : ‡∏Ñ‡∏∏‡∏ì‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡∏î‡∏¥‡∏™‡∏Ñ‡∏≠‡∏£‡πå‡∏î ‡πÇ‡∏õ‡∏£‡∏î‡∏£‡∏≠‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏™‡∏¥‡∏ó‡∏ò‡πå‡∏¥‡∏à‡∏≤‡∏Å‡∏≤‡∏ó‡∏≤‡∏á‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô"
                )


            elif get_quest() == "Close":
                return await interaction.response.send_message("‡∏Ç‡∏≠‡∏≠‡∏†‡∏±‡∏¢‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏Ñ‡∏ß‡∏™‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÉ‡∏ô‡∏Ç‡∏ô‡∏∞‡∏ô‡∏µ‡πâ", ephemeral=True)

            elif PlayerEvent().check(member.id) != 0:
                await interaction.response.defer(ephemeral=True, invisible=False)
                return await interaction.followup.send("‡∏Ñ‡∏∏‡∏ì‡∏°‡∏µ 1 ‡∏≠‡∏µ‡πÄ‡∏ß‡πâ‡∏ô‡πÉ‡∏´‡∏°‡πà‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå‡∏ô‡∏µ‡πâ")

            elif UserMission().check(member.id) == 0:
                embed = discord.Embed(colour=discord.Colour.from_rgb(243, 80, 10))
                embed.set_image(url=img_("guild_master"))
                return await interaction.response.send_message(embed=embed, view=GetMissionButton(), ephemeral=True)


            elif UserMission().check(member.id) == 1:
                def send_embed():
                    data = UserMission().mission(member.id)

                    if UserMission().end_date(member.id) < expire_date()[0]:

                        embeds = discord.Embed(
                            title="üì¶ {}".format(data[2]),
                            description="‡∏Ñ‡∏∏‡∏ì‡∏°‡∏µ‡∏†‡∏≤‡∏£‡∏Å‡∏¥‡∏à‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏à‡∏±‡∏î‡∏™‡πà‡∏á‡πÉ‡∏´‡πâ‡∏Å‡∏±‡∏ö Guild Master",
                            colour=discord.Colour.red()

                        )
                        embeds.set_image(url="{}".format(data[4]))
                        embeds.add_field(name="‡∏ß‡∏±‡∏ô‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏™‡πà‡∏á‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ {}".format(data[8]),
                                         value="üî¥ ‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏à‡∏±‡∏î‡∏™‡πà‡∏á‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏†‡∏≤‡∏¢‡πÉ‡∏ô‡∏£‡∏∞‡∏¢‡∏∞‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î")
                    else:
                        embeds = discord.Embed(
                            title="üì¶ {}".format(data[2]),
                            description="‡∏Ñ‡∏∏‡∏ì‡∏°‡∏µ‡∏†‡∏≤‡∏£‡∏Å‡∏¥‡∏à‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏à‡∏±‡∏î‡∏™‡πà‡∏á‡πÉ‡∏´‡πâ‡∏Å‡∏±‡∏ö Guild Master",
                            colour=discord.Colour.green()

                        )
                        embeds.set_image(url="{}".format(data[4]))
                        embeds.add_field(name="‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏™‡πà‡∏á", value=data[3])
                        embeds.add_field(name="‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•‡∏ô‡∏≥‡∏™‡πà‡∏á", value="${:,d}".format(data[6]))
                        embeds.add_field(name="‡∏Ñ‡πà‡∏≤‡∏õ‡∏£‡∏∞‡∏™‡∏ö‡∏Å‡∏≤‡∏£‡∏ì‡πå", value="{} Exp.".format(data[5]))
                        embeds.add_field(name="‡∏Ñ‡∏£‡∏ö‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏™‡πà‡∏á‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤", value="{}".format(data[8]))
                    return embeds

                if UserMission().end_date(member.id) < expire_date()[0]:

                    return await interaction.response.send_message(
                        embed=send_embed(),
                        ephemeral=True, view=MissionExpire())
                else:
                    return await interaction.response.send_message(
                        embed=send_embed(),
                        ephemeral=True, view=MissionReportButton(self.bot))
            else:
                rank = Ranking().ranking(interaction.user.id)[2]
                embed = discord.Embed(
                    title="Ranking information",
                    color=discord.Colour.from_rgb(255, 195, 0)
                )
                embed.add_field(name="‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô", value=interaction.user.display_name)
                embed.add_field(name="‡∏Ñ‡πà‡∏≤‡∏õ‡∏£‡∏∞‡∏™‡∏ö‡∏Å‡∏≤‡∏£‡∏ì‡πå", value=Ranking().ranking(interaction.user.id)[3])
                embed.set_thumbnail(url=ranking_img(rank))
                embed.set_image(url=img_("rank_embed"))
                return await interaction.response.send_message(embed=embed, ephemeral=True)

    @discord.ui.button(label="‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏ó‡∏µ‡∏°‡∏á‡∏≤‡∏ô", style=discord.ButtonStyle.secondary, emoji="‚òé", custom_id='contact')
    async def contact(self, button, interaction: discord.Interaction):
        button.disabled = False
        interaction.message.author = interaction.user
        bucket = self.cooldown.get_bucket(interaction.message)
        retry = bucket.update_rate_limit()
        if retry:
            return await interaction.response.send_message(
                f'‡∏≠‡∏µ‡∏Å {round(retry, int(get_cooldown_time()))} ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ñ‡∏∂‡∏á‡∏à‡∏∞‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á', ephemeral=True)
        await interaction.response.send_message(
            f"{interaction.user.mention} click ‡∏ó‡∏µ‡πà‡∏õ‡∏∏‡πà‡∏°‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£",
            view=ContractButton(self.bot), ephemeral=True)



class BankandRank(discord.ui.View):
    def __init__(self):
        super(BankandRank, self).__init__(timeout=None)
    @discord.ui.button(label="BANK", style=discord.ButtonStyle.secondary, emoji="üè¶", custom_id="player_bank")
    async def player_bank(self, button, interaction:discord.Interaction):
        button.disabled=False
        member = interaction.user
        try:
            if Bank().check_member(member.id) != 1:
                Bank().new(member.id, member.discriminator)
            else:
                pass
        except Exception as e:
            return await interaction.response.send_message(e)
        else:
            data = Bank().bank(member.id)
            embed = discord.Embed(
                title=f"üìù ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£‡∏Ç‡∏≠‡∏á {member.display_name}",
                colour=discord.Colour.green()
            )
            embed.add_field(name="‡πÄ‡∏•‡∏Ç‡∏ö‡∏±‡∏ç‡∏ä‡∏µ", value=data[1])
            embed.add_field(name="‡πÄ‡∏à‡πâ‡∏≤‡∏Ç‡∏≠‡∏á‡∏ö‡∏±‡∏ç‡∏ä‡∏µ", value=f"{member.mention}")
            embed.add_field(name="‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô", value="${:,d}".format(data[3]))
            embed.set_thumbnail(url=member.display_avatar)
            embed.set_footer(text="‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô‡πÉ‡∏ô‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏ô‡∏µ‡πâ‡∏à‡∏∞‡∏ñ‡∏π‡∏Å‡πÇ‡∏≠‡∏ô‡πÄ‡∏Ç‡πâ‡∏≤ Wallet ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô‡∏à‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢")

            return await interaction.response.edit_message(content="Your Bank Information", embed=embed)
    @discord.ui.button(label="RANK", style=discord.ButtonStyle.secondary, emoji="üèÜ", custom_id="player_rank")
    async def player_rank(self, button, interaction: discord.Interaction):
        button.disabled=False
        member = interaction.user

        try:
            if Bank().check_member(member.id) != 1:
                Bank().new(member.id, member.discriminator)
            else:
                pass
        except Exception as e:
            return await interaction.response.send_message(e,ephemeral=True)
        else:
            rank = Ranking().ranking(interaction.user.id)[2]
            embed = discord.Embed(
                title="Ranking information",
                color=discord.Colour.from_rgb(255, 195, 0)
            )
            embed.add_field(name="‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô", value=interaction.user.display_name)
            embed.add_field(name="‡∏Ñ‡πà‡∏≤‡∏õ‡∏£‡∏∞‡∏™‡∏ö‡∏Å‡∏≤‡∏£‡∏ì‡πå", value=Ranking().ranking(interaction.user.id)[3])
            embed.set_thumbnail(url=ranking_img(rank))
            embed.set_image(url=img_("rank_embed"))
            return await interaction.response.edit_message(content="Your Rank Information.", embed=embed)